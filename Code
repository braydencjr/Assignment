import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

// Task class representing individual tasks
class Task {
    private String title;
    private String description;
    private String dueDate;
    private String category;
    private String priority;
    private boolean isCompleted;

    // Constructor
    public Task(String title, String description, String dueDate, String category, String priority) {
        this.title = title;
        this.description = description;
        this.dueDate = dueDate;
        this.category = category;
        this.priority = priority;
        this.isCompleted = false;
    }

    // Getters and Setters
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDueDate() {
        return dueDate;
    }

    public void setDueDate(String dueDate) {
        this.dueDate = dueDate;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getPriority() {
        return priority;
    }

    public void setPriority(String priority) {
        this.priority = priority;
    }

    public boolean isCompleted() {
        return isCompleted;
    }

    public void markAsCompleted() {
        this.isCompleted = true;
    }

    @Override
    public String toString() {
        return "[" + (isCompleted ? "Completed" : "Incomplete") + "] " + title + " - Due: " + dueDate + " - Category: " + category + " - Priority: " + priority;
    }
}

// Class to handle task storage in a CSV file
class TaskStorage {

    private static final String FILE_PATH = "tasks.csv";

    // Save tasks to CSV
    public static void saveTasks(List<Task> tasks) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_PATH))) {
            for (Task task : tasks) {
                writer.println(taskToCSV(task));
            }
        } catch (IOException e) {
            System.out.println("Error saving tasks: " + e.getMessage());
        }
    }

    // Load tasks from CSV
    public static void loadTasks(List<Task> tasks) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                tasks.add(csvToTask(line));
            }
        } catch (IOException e) {
            System.out.println("Error loading tasks: " + e.getMessage());
        }
    }

    // Convert a task to CSV format
    private static String taskToCSV(Task task) {
        return String.join(",", task.getTitle(), task.getDescription(), task.getDueDate(), task.getCategory(), task.getPriority(), String.valueOf(task.isCompleted()));
    }

    // Convert a CSV line to a task object
    private static Task csvToTask(String csv) {
        String[] data = csv.split(",");
        String title = data[0];
        String description = data[1];
        String dueDate = data[2];
        String category = data[3];
        String priority = data[4];
        boolean isCompleted = Boolean.parseBoolean(data[5]);

        Task task = new Task(title, description, dueDate, category, priority);
        if (isCompleted) {
            task.markAsCompleted();
        }
        return task;
    }
}

// Main class handling task operations
public class ToDoListApp {
    private static List<Task> tasks = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        TaskStorage.loadTasks(tasks); // Load tasks from CSV

        while (true) {
            showMenu();
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    createTask();
                    break;
                case 2:
                    markTaskAsComplete();
                    break;
                case 3:
                    editTask();
                    break;
                case 4:
                    deleteTask();
                    break;
                case 5:
                    sortTasks();
                    break;
                case 6:
                    searchTasks();
                    break;
                case 7:
                    showAllTasks();
                    break;
                case 8:
                    TaskStorage.saveTasks(tasks); // Save tasks before exiting
                    System.out.println("Exiting application...");
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    // Show menu options
    private static void showMenu() {
        System.out.println("\n--- To-Do List Menu ---");
        System.out.println("1. Create Task");
        System.out.println("2. Mark Task as Complete");
        System.out.println("3. Edit Task");
        System.out.println("4. Delete Task");
        System.out.println("5. Sort Tasks");
        System.out.println("6. Search Tasks");
        System.out.println("7. View All Tasks");
        System.out.println("8. Exit");
        System.out.print("Choose an option: ");
    }

    // Create a new task
    private static void createTask() {
        System.out.print("Enter task title: ");
        String title = scanner.nextLine();
        System.out.print("Enter task description: ");
        String description = scanner.nextLine();
        System.out.print("Enter due date (YYYY-MM-DD): ");
        String dueDate = scanner.nextLine();
        System.out.print("Enter task category (Homework, Personal, Work): ");
        String category = scanner.nextLine();
        System.out.print("Enter priority (Low, Medium, High): ");
        String priority = scanner.nextLine();

        Task newTask = new Task(title, description, dueDate, category, priority);
        tasks.add(newTask);
        System.out.println("Task \"" + title + "\" added successfully!");
    }

    // Mark a task as complete
    private static void markTaskAsComplete() {
        showAllTasks();
        System.out.print("Enter the task number to mark as complete: ");
        int taskNum = scanner.nextInt() - 1;
        if (taskNum >= 0 && taskNum < tasks.size()) {
            tasks.get(taskNum).markAsCompleted();
            System.out.println("Task \"" + tasks.get(taskNum).getTitle() + "\" marked as complete!");
        } else {
            System.out.println("Invalid task number.");
        }
    }

    // Edit a task
    private static void editTask() {
        showAllTasks();
        System.out.print("Enter the task number to edit: ");
        int taskNum = scanner.nextInt() - 1;
        scanner.nextLine(); // Consume newline
        if (taskNum >= 0 && taskNum < tasks.size()) {
            Task task = tasks.get(taskNum);
            System.out.println("Editing Task: " + task.getTitle());
            System.out.print("Enter new title (press enter to keep current): ");
            String newTitle = scanner.nextLine();
            if (!newTitle.isEmpty()) task.setTitle(newTitle);

            System.out.print("Enter new description (press enter to keep current): ");
            String newDescription = scanner.nextLine();
            if (!newDescription.isEmpty()) task.setDescription(newDescription);

            System.out.print("Enter new due date (press enter to keep current): ");
            String newDueDate = scanner.nextLine();
            if (!newDueDate.isEmpty()) task.setDueDate(newDueDate);

            System.out.print("Enter new category (press enter to keep current): ");
            String newCategory = scanner.nextLine();
            if (!newCategory.isEmpty()) task.setCategory(newCategory);

            System.out.print("Enter new priority (press enter to keep current): ");
            String newPriority = scanner.nextLine();
            if (!newPriority.isEmpty()) task.setPriority(newPriority);

            System.out.println("Task updated successfully!");
        } else {
            System.out.println("Invalid task number.");
        }
    }

    // Delete a task
    private static void deleteTask() {
        showAllTasks();
        System.out.print("Enter the task number to delete: ");
        int taskNum = scanner.nextInt() - 1;
        if (taskNum >= 0 && taskNum < tasks.size()) {
            System.out.println("Task \"" + tasks.get(taskNum).getTitle() + "\" deleted successfully!");
            tasks.remove(taskNum);
        } else {
            System.out.println("Invalid task number.");
        }
    }

    // Sort tasks by due date or priority
    private static void sortTasks() {
        System.out.println("Sort by:");
        System.out.println("1. Due Date (Ascending)");
        System.out.println("2. Due Date (Descending)");
        System.out.println("3. Priority (High to Low)");
        System.out.println("4. Priority (Low to High)");
        System.out.print("Choose an option: ");
        int sortOption = scanner.nextInt();

        switch (sortOption) {
            case 1:
                Collections.sort(tasks, Comparator.comparing(Task::getDueDate));
                System.out.println("Tasks sorted by Due Date (Ascending)!");
                break;
            case 2:
                Collections.sort(tasks, Comparator.comparing(Task::getDueDate).reversed());
                System.out.println("Tasks sorted by Due Date (Descending)!");
                break;
            case 3:
                Collections.sort(tasks, Comparator.comparing(Task::getPriority).reversed());
                System.out.println("Tasks sorted by Priority (High to Low)!");
                break;
            case 4:
                Collections.sort(tasks, Comparator.comparing(Task::getPriority));
                System.out.println("Tasks sorted by Priority (Low to High)!");
                break;
            default:
                System.out.println("Invalid option.");
        }
    }

    // Search for tasks by title or description
    private static void searchTasks() {
        System.out.print("Enter a keyword to search by title or description: ");
        String keyword = scanner.nextLine();
        System.out.println("=== Search Results ===");
        for (Task task : tasks) {
            if (task.getTitle().contains(keyword) || task.getDescription().contains(keyword)) {
                System.out.println(task);
            }
        }
    }

    // Display all tasks
    private static void showAllTasks() {
        System.out.println("=== All Tasks ===");
        if (tasks.isEmpty()) {
            System.out.println("No tasks found.");
        } else {
            for (int i = 0; i < tasks.size(); i++) {
                System.out.println((i + 1) + ". " + tasks.get(i));
            }
        }
    }
}
